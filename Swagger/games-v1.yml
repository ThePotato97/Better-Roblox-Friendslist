openapi: 3.0.1
info:
  title: Games Api v1
  version: v1
servers:
- url: https://games.roblox.com/
paths:
  /v1/games:
    get:
      tags:
      - Games
      summary: Gets a list of games' detail
      parameters:
      - name: universeIds
        in: query
        description: A list of universe Ids. Cannot exceed a maximum of 100 IDs.
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameDetailResponse]'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameDetailResponse]'
        400:
          description: "8: No universe IDs were specified.\r\n9: Too many universe\
            \ IDs were requested."
          content: {}
  /v1/games/{placeId}/private-servers:
    get:
      tags:
      - GameInstances
      summary: Get list of private servers user can access for given game id.
      parameters:
      - name: placeId
        in: path
        description: The Id of the place we are geting the private server list for.
        required: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        description: The number of results per request.
        schema:
          type: integer
          format: int32
          default: 10
          enum:
          - 10
          - 25
          - 50
          - 100
      - name: cursor
        in: query
        description: The paging cursor for the previous or next page.
        schema:
          type: string
      - name: sortOrder
        in: query
        description: The order the results are sorted in.
        schema:
          type: string
          default: Asc
          enum:
          - Asc
          - Desc
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Web.Responses.Games.GameServerResponse]'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Web.Responses.Games.GameServerResponse]'
        400:
          description: "1: The place is invalid.\r\n7: Guest users are not allowed."
          content: {}
        404:
          description: '1: The place is invalid.'
          content: {}
  /v1/games/{placeId}/servers/{serverType}:
    get:
      tags:
      - GameInstances
      summary: Get the game server list
      parameters:
      - name: placeId
        in: path
        description: The Id of the place we are geting the server list for.
        required: true
        schema:
          type: integer
          format: int64
      - name: serverType
        in: path
        description: The type of the server we geting the server list for.
        required: true
        schema:
          type: integer
          format: int32
          enum:
          - 0
          - 1
      - name: sortOrder
        in: query
        description: The sort order of the servers.
        schema:
          type: integer
          format: int32
          default: 2
          enum:
          - 1
          - 2
      - name: excludeFullGames
        in: query
        description: Exclude full servers.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The number of results per request.
        schema:
          type: integer
          format: int32
          default: 10
          enum:
          - 10
          - 25
          - 50
          - 100
      - name: cursor
        in: query
        description: The paging cursor for the previous or next page.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Web.Responses.Games.GameServerResponse]'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Web.Responses.Games.GameServerResponse]'
        400:
          description: "1: The place is invalid.\r\n6: The server type is invalid.\
            \ For fetching private servers, please use https://games.roblox.com/v1/games/{placeId}/private-servers.\r\
            \n7: Guest users are not allowed."
          content: {}
        404:
          description: '1: The place is invalid.'
          content: {}
  /v1/games/{universeId}/favorites:
    get:
      tags:
      - Favorites
      summary: Returns if a game was marked as favorite for the authenticated user
      parameters:
      - name: universeId
        in: path
        description: The Id of the universe.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameFavoriteResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameFavoriteResponse'
        400:
          description: '3: The universe''s root place is invalid.'
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        404:
          description: '2: The requested universe does not exist.'
          content: {}
    post:
      tags:
      - Favorites
      summary: Favors (or unfavors) a game for the authenticated user
      parameters:
      - name: universeId
        in: path
        description: The Id of the universe.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Request data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.Models.Request.GameFavoritesRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.Models.Request.GameFavoritesRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel'
        400:
          description: '3: The universe''s root place is invalid.'
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: "0: Token Validation Failed\r\n11: You are not authorized to\
            \ perform this action."
          content: {}
        404:
          description: '2: The requested universe does not exist.'
          content: {}
        429:
          description: '4: Too many requests have been made.'
          content: {}
      x-codegen-request-body-name: request
  /v1/games/{universeId}/favorites/count:
    get:
      tags:
      - Favorites
      summary: Get the favorites count of the a specific game
      parameters:
      - name: universeId
        in: path
        description: The Id of the universe.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameFavoritesCountResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameFavoritesCountResponse'
        400:
          description: '3: The universe''s root place is invalid.'
          content: {}
        404:
          description: '2: The requested universe does not exist.'
          content: {}
  /v1/games/{universeId}/game-passes:
    get:
      tags:
      - GamePasses
      summary: Get the game's game passes
      parameters:
      - name: universeId
        in: path
        description: The id of the universe.
        required: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        description: The number of results per request.
        schema:
          type: integer
          format: int32
          default: 10
          enum:
          - 10
          - 25
          - 50
          - 100
      - name: cursor
        in: query
        description: The paging cursor for the previous or next page.
        schema:
          type: string
      - name: sortOrder
        in: query
        description: The order the results are sorted in.
        schema:
          type: string
          default: Asc
          enum:
          - Asc
          - Desc
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Games.Api.Models.Response.GamePassResponse]'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Games.Api.Models.Response.GamePassResponse]'
        400:
          description: '2: The universe''s root place is invalid.'
          content: {}
        404:
          description: '1: The requested universe does not exist.'
          content: {}
  /v1/games/{universeId}/media:
    get:
      tags:
      - Games
      summary: Get the game media data
      parameters:
      - name: universeId
        in: path
        description: The id of the universe we get media data from.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameMediaItem]'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameMediaItem]'
        400:
          description: '3: The universe''s root place is invalid.'
          content: {}
        404:
          description: '2: The requested universe does not exist.'
          content: {}
      deprecated: true
  /v1/games/{universeId}/votes:
    get:
      tags:
      - Votes
      summary: Get the game vote status
      parameters:
      - name: universeId
        in: path
        description: The id of the universe we get vote status from.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameVoteResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameVoteResponse'
        400:
          description: "2: The universe's root place is invalid.\r\n3: The asset is\
            \ not voteable."
          content: {}
        404:
          description: '1: The requested universe does not exist.'
          content: {}
        429:
          description: '10: Internal service busy. Please try again later.'
          content: {}
        500:
          description: '0: An unknown error occurred.'
          content: {}
      deprecated: true
  /v1/games/{universeId}/votes/user:
    get:
      tags:
      - Votes
      summary: Get the user's vote status for a game
      parameters:
      - name: universeId
        in: path
        description: The id of the universe we get user vote status from.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.UserGameVoteResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.UserGameVoteResponse'
        400:
          description: "2: The universe's root place is invalid.\r\n3: The asset is\
            \ not voteable."
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        404:
          description: '1: The requested universe does not exist.'
          content: {}
        429:
          description: '10: Internal service busy. Please try again later.'
          content: {}
        500:
          description: '0: An unknown error occurred.'
          content: {}
  /v1/games/games-product-info:
    get:
      tags:
      - Games
      summary: Gets a list of games' product info, used to purchase a game
      parameters:
      - name: universeIds
        in: query
        description: A list of universe Ids. Cannot exceed a maximum of 100 IDs.
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameProductResponse]'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameProductResponse]'
        400:
          description: "8: No universe IDs were specified.\r\n9: Too many universe\
            \ IDs were requested."
          content: {}
  /v1/games/game-thumbnail:
    get:
      tags:
      - Games
      summary: Get a single game thumbnail
      parameters:
      - name: imageToken
        in: query
        required: true
        schema:
          type: string
      - name: height
        in: query
        schema:
          type: integer
          format: int32
          default: 50
      - name: width
        in: query
        schema:
          type: integer
          format: int32
          default: 50
      responses:
        200:
          description: OK
          content: {}
        404:
          description: '10: This endpoint is deprecated'
          content: {}
      deprecated: true
  /v1/games/game-thumbnails:
    get:
      tags:
      - Games
      summary: Gets a list of game thumbnails
      parameters:
      - name: imageTokens
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: height
        in: query
        schema:
          type: integer
          format: int32
          default: 50
      - name: width
        in: query
        schema:
          type: integer
          format: int32
          default: 50
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.Thumbnail'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.Thumbnail'
        404:
          description: '10: This endpoint is deprecated'
          content: {}
      deprecated: true
  /v1/games/list:
    get:
      tags:
      - Games
      summary: Gets a list of games
      parameters:
      - name: SortToken
        in: query
        description: Sort token.
        required: true
        schema:
          type: string
      - name: GameFilter
        in: query
        description: Game filter.
        required: true
        schema:
          type: string
      - name: TimeFilter
        in: query
        description: Time filter.
        required: true
        schema:
          type: string
      - name: GenreFilter
        in: query
        description: Genre filter.
        required: true
        schema:
          type: string
      - name: ExclusiveStartId
        in: query
        description: Id to start getting entities.
        required: true
        schema:
          type: integer
          format: int64
      - name: SortOrder
        in: query
        description: Sort order.
        required: true
        schema:
          type: integer
          format: int32
      - name: GameSetTargetId
        in: query
        description: Extra id needed for specific Game Sets.
        required: true
        schema:
          type: integer
          format: int64
      - name: Keyword
        in: query
        description: Keyword
        required: true
        schema:
          type: string
      - name: StartRows
        in: query
        description: StartRows
        required: true
        schema:
          type: integer
          format: int32
      - name: MaxRows
        in: query
        description: MaxRows
        required: true
        schema:
          type: integer
          format: int32
      - name: ContextCountryRegionId
        in: query
        description: ContextCountryRegionId
        required: true
        schema:
          type: integer
          format: int32
      - name: ContextUniverseId
        in: query
        description: ContextUniverseId
        required: true
        schema:
          type: integer
          format: int64
      - name: PageContext.PageId
        in: query
        description: Id to identify the page as shown to the user.
        required: true
        schema:
          type: string
          format: uuid
      - name: PageContext.IsSeeAllPage
        in: query
        description: SortPosition
        required: true
        schema:
          type: boolean
      - name: SortPosition
        in: query
        description: SortPosition
        required: true
        schema:
          type: integer
          format: int32
      - name: SessionId
        in: query
        description: SessionId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GamesSearchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GamesSearchResponse'
        500:
          description: '0: Compliance Context service is unavailable.'
          content: {}
  /v1/games/list-spotlight:
    get:
      tags:
      - Games
      summary: Gets games that the client should spotlight.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameSpotlightResponse]'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameSpotlightResponse]'
        500:
          description: '0: Compliance Context service is unavailable.'
          content: {}
  /v1/games/multiget-place-details:
    get:
      tags:
      - Games
      summary: Get place details
      parameters:
      - name: placeIds
        in: query
        description: List of placeId to uniquely Identify a place
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.PlaceDetails'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.PlaceDetails'
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
  /v1/games/multiget-playability-status:
    get:
      tags:
      - Games
      summary: Gets a list of universe playability statuses for the authenticated
        user
      parameters:
      - name: universeIds
        in: query
        description: A list of universe Ids. Cannot exceed a maximum of 100 IDs.
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.PlayabilityStatusResponse'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.PlayabilityStatusResponse'
        400:
          description: "8: No universe IDs were specified.\r\n9: Too many universe\
            \ IDs were requested."
          content: {}
  /v1/games/recommendations/algorithm/{algorithmName}:
    get:
      tags:
      - Games
      summary: Get games recommendations
      parameters:
      - name: algorithmName
        in: path
        description: The algorithm name of recommendations
        required: true
        schema:
          type: string
      - name: PaginationKey
        in: query
        description: "The key of a page, which includes the start row index and all\
          \ other necessary information to query the data.\r\nThis parameter is usually\
          \ not needed for the first page."
        required: true
        schema:
          type: string
      - name: MaxRows
        in: query
        description: The requested number of rows.
        required: true
        schema:
          type: integer
          format: int32
      - name: IsTruncatedResultsEnabled
        in: query
        description: Truncated Results
        required: true
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameRecommendationsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameRecommendationsResponse'
        400:
          description: '1: The pagination key is invalid.'
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
      deprecated: true
  /v1/games/recommendations/game/{universeId}:
    get:
      tags:
      - Games
      summary: Get games recommendations based on a given universe
      parameters:
      - name: universeId
        in: path
        description: The universe to base recommendations on
        required: true
        schema:
          type: integer
          format: int64
      - name: PaginationKey
        in: query
        description: "The key of a page, which includes the start row index and all\
          \ other necessary information to query the data.\r\nThis parameter is usually\
          \ not needed for the first page."
        required: true
        schema:
          type: string
      - name: MaxRows
        in: query
        description: The requested number of rows.
        required: true
        schema:
          type: integer
          format: int32
      - name: IsTruncatedResultsEnabled
        in: query
        description: Truncated Results
        required: true
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameRecommendationsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameRecommendationsResponse'
        400:
          description: '1: The pagination key is invalid.'
          content: {}
        404:
          description: '2: The requested universe does not exist.'
          content: {}
  /v1/games/sorts:
    get:
      tags:
      - Games
      summary: Gets an ordered list of all sorts
      parameters:
      - name: GameSortsContext
        in: query
        description: Context to determine which game sorts are being requested.
        required: true
        schema:
          type: integer
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 6
          - 7
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameSortsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameSortsResponse'
  /v1/games/votes:
    get:
      tags:
      - Votes
      summary: Gets a list of universe vote status
      parameters:
      - name: universeIds
        in: query
        description: A list of universe Ids. Cannot exceed a maximum of 100 IDs.
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameVoteResponse]'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameVoteResponse]'
        400:
          description: "3: The asset is not voteable.\r\n8: No universe IDs were specified.\r\
            \n9: Too many universe IDs were requested."
          content: {}
        429:
          description: '10: Internal service busy. Please try again later.'
          content: {}
        500:
          description: '0: An unknown error occurred.'
          content: {}
  /v1/private-servers:
    get:
      tags:
      - VipServers
      summary: Get private servers from private server ids
      parameters:
      - name: privateServerIds
        in: query
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.PrivateServersResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.PrivateServersResponse'
        400:
          description: "8: The creator of this game has disabled private servers for\
            \ this game.\r\n34: Invalid request, private server ids cannot be null.\r\
            \n35: Guest users are not allowed."
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: '2: You are not the owner of this private server.'
          content: {}
        404:
          description: "1: The private server is invalid or does not exist.\r\n4:\
            \ The universe does not exist."
          content: {}
  /v1/private-servers/enabled-in-universe/{universeId}:
    get:
      tags:
      - VipServers
      summary: Checks if the private servers are enabled in the specified universe.
      parameters:
      - name: universeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.PrivateServersEnabledInUniverseResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.PrivateServersEnabledInUniverseResponse'
        400:
          description: '8: No universe IDs were specified.'
          content: {}
  /v1/vip-server/can-invite/{userId}:
    get:
      tags:
      - VipServers
      summary: Determines if a user by id is allowed to receive a VIP Server invite
        from the authenticated user.
      parameters:
      - name: userId
        in: path
        description: The user id.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerCanInviteResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerCanInviteResponse'
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        404:
          description: '19: The user is does not exist.'
          content: {}
  /v1/vip-servers/{id}:
    get:
      tags:
      - VipServers
      summary: Get necessary data to generate webpage
      parameters:
      - name: id
        in: path
        description: The VIP Server ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerResponse'
        400:
          description: '8: The creator of this game has disabled private servers for
            this game.'
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: '2: You are not the owner of this private server.'
          content: {}
        404:
          description: "1: The private server is invalid or does not exist.\r\n4:\
            \ The universe does not exist."
          content: {}
    patch:
      tags:
      - VipServers
      summary: Updates vip server
      parameters:
      - name: id
        in: path
        description: The VIP Server ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The Roblox.Games.Api.VipServerUpdateRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.VipServerUpdateRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.VipServerUpdateRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerResponse'
        400:
          description: "8: The creator of this game has disabled private servers for\
            \ this game.\r\n10: The name of the private server is either empty or\
            \ too long."
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: "0: Token Validation Failed\r\n2: You are not the owner of\
            \ this private server.\r\n11: You cannot activate a cancelled private\
            \ server.\r\n12: The game must not be Friends Only to allow private servers.\r\
            \n13: Join Link can be generated only for active private servers."
          content: {}
        404:
          description: "1: The private server is invalid or does not exist.\r\n4:\
            \ The universe does not exist."
          content: {}
        429:
          description: '3: Please wait a few minutes before configuring your private
            server again.'
          content: {}
      x-codegen-request-body-name: request
  /v1/games/vip-servers/{universeId}:
    post:
      tags:
      - VipServers
      summary: Create VIP server for a game
      parameters:
      - name: universeId
        in: path
        description: The id of the universe.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.CreateVipServersRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.CreateVipServersRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse'
        400:
          description: '15: The price for purchasing this private server has changed.
            Please refresh the page and try again.'
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: '0: Token Validation Failed'
          content: {}
        404:
          description: '4: The universe does not exist.'
          content: {}
        500:
          description: '16: We are having a problem completing your purchase. Please
            try again in a few minutes.'
          content: {}
      x-codegen-request-body-name: requestBody
  /v1/games/{universeId}/user-votes:
    patch:
      tags:
      - Votes
      summary: Set the user's vote for a game
      parameters:
      - name: universeId
        in: path
        description: The id of the universe.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.Models.Request.SetUserGameVoteRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.Models.Request.SetUserGameVoteRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel'
        400:
          description: "2: The universe's root place is invalid.\r\n3: The asset is\
            \ not voteable.\r\n4: The requested vote is invalid."
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: "0: Token Validation Failed\r\n6: The user needs to play the\
            \ game before vote.\r\n7: The user needs additional permission to vote."
          content: {}
        404:
          description: '1: The requested universe does not exist.'
          content: {}
        429:
          description: "5: Too many attempts to vote. Please try again later.\r\n\
            10: Internal service busy. Please try again later."
          content: {}
        500:
          description: '0: An unknown error occurred.'
          content: {}
      x-codegen-request-body-name: requestBody
  /v1/vip-servers/{id}/permissions:
    patch:
      tags:
      - VipServers
      summary: Update friend/clan access and allowed friends/clan list
      parameters:
      - name: id
        in: path
        description: The VIP Server ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The Roblox.Games.Api.VipServerUpdatePermissionsRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.VipServerUpdatePermissionsRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.VipServerUpdatePermissionsRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerPermissionsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerPermissionsResponse'
        400:
          description: "6: You cannot add so many players to the private server's\
            \ invite list.\r\n8: The creator of this game has disabled private servers\
            \ for this game.\r\n12: The game must not be Friends Only to allow private\
            \ servers.\r\n28: You may only add or remove valid players to your private\
            \ server's invite list.\r\n29: You may only add or remove players when\
            \ your private server is active."
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: "0: Token Validation Failed\r\n2: You are not the owner of\
            \ this private server."
          content: {}
        404:
          description: "1: The private server is invalid or does not exist.\r\n4:\
            \ The universe does not exist."
          content: {}
      x-codegen-request-body-name: request
  /v1/vip-servers/{id}/subscription:
    patch:
      tags:
      - VipServers
      summary: Updates subscription status of a vip server
      parameters:
      - name: id
        in: path
        description: The VIP Server ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The Roblox.Games.Api.VipServerUpdateSubscriptionRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.VipServerUpdateSubscriptionRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.VipServerUpdateSubscriptionRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerSubscriptionResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerSubscriptionResponse'
        400:
          description: "8: The creator of this game has disabled private servers for\
            \ this game.\r\n32: You do not have enough funds available to renew the\
            \ subscription for this private server."
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: "0: Token Validation Failed\r\n2: You are not the owner of\
            \ this private server.\r\n21: You may not configure a cancelled private\
            \ server. Please renew your subscription before configuring."
          content: {}
        404:
          description: "1: The private server is invalid or does not exist.\r\n4:\
            \ The universe does not exist."
          content: {}
        429:
          description: '3: Please wait a few minutes before configuring your private
            server again.'
          content: {}
      x-codegen-request-body-name: request
  /v1/vip-servers/{id}/voicesettings:
    patch:
      tags:
      - VipServers
      summary: Update voice settings for a private server.
      parameters:
      - name: id
        in: path
        description: The VIP Server ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The Roblox.Games.Api.VipServerUpdateVoiceSettingsRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.VipServerUpdateVoiceSettingsRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Roblox.Games.Api.VipServerUpdateVoiceSettingsRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerVoiceSettingsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Roblox.Games.Api.VipServerVoiceSettingsResponse'
        400:
          description: '8: The creator of this game has disabled private servers for
            this game.'
          content: {}
        401:
          description: '0: Authorization has been denied for this request.'
          content: {}
        403:
          description: "0: Token Validation Failed\r\n2: You are not the owner of\
            \ this private server.\r\n33: You are not eligible for voice chat."
          content: {}
        404:
          description: '1: The private server is invalid or does not exist.'
          content: {}
      x-codegen-request-body-name: request
components:
  schemas:
    Roblox.Games.Api.CreateVipServersRequest:
      type: object
      properties:
        name:
          type: string
          description: The name new vip server will be
        expectedPrice:
          type: integer
          description: the expected price of the vip server
          format: int64
      description: An create request for a vip server
    Roblox.Games.Api.GameResponse:
      type: object
      properties:
        id:
          type: integer
          description: Game id
          format: int64
        name:
          type: string
          description: Game name
        rootPlace:
          $ref: '#/components/schemas/Roblox.Games.Api.PlaceResponse'
      description: Response model for a VIP server game.
    Roblox.Games.Api.GameServerPlayerResponse:
      type: object
      properties:
        playerToken:
          type: string
          description: The thumbnail token for the player.
        id:
          type: integer
          format: int64
        name:
          type: string
        displayName:
          type: string
      description: A response model representing a game server player.
    Roblox.Games.Api.Models.Request.GameFavoritesRequest:
      type: object
      properties:
        isFavorited:
          type: boolean
          description: true for favor the game, false for unfavor the game.
      description: Game favorite request model.
    Roblox.Games.Api.Models.Request.SetUserGameVoteRequest:
      type: object
      properties:
        vote:
          type: boolean
          description: The vote to set
      description: A request for set user's vote for a game
    Roblox.Games.Api.Models.Response.ElasticSearchDebugInfoModel:
      type: object
      properties:
        esQuery:
          type: string
          description: Gets or sets the ElasticSearch query that was used to fetch
            the search results.
      description: ElasticSearch debug info for games search.
    Roblox.Games.Api.Models.Response.GameCreator:
      type: object
      properties:
        id:
          type: integer
          description: The game creator id
          format: int64
        name:
          type: string
          description: The game creator name
        type:
          type: string
          description: The game creator type
        isRNVAccount:
          type: boolean
          description: The game creator account is Luobu Real Name Verified
        hasVerifiedBadge:
          type: boolean
          description: Builder verified badge status.
      description: Response model for getting the game creator
    Roblox.Games.Api.Models.Response.GameDetailResponse:
      type: object
      properties:
        id:
          type: integer
          description: The game universe id
          format: int64
        rootPlaceId:
          type: integer
          description: The game root place id
          format: int64
        name:
          type: string
          description: The game name
        description:
          type: string
          description: The game description
        sourceName:
          type: string
          description: The game name in the source language, if different from the
            returned name.
        sourceDescription:
          type: string
          description: The game description in the source language, if different from
            the returned description.
        creator:
          $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameCreator'
        price:
          type: integer
          description: The game paid access price
          format: int64
        allowedGearGenres:
          type: array
          description: The game allowed gear genres
          items:
            type: string
        allowedGearCategories:
          type: array
          description: The game allowed gear categoris
          items:
            type: string
        isGenreEnforced:
          type: boolean
          description: The game allows place to be copied
        copyingAllowed:
          type: boolean
          description: The game allows place to be copied
        playing:
          type: integer
          description: Current player count of the game
          format: int64
        visits:
          type: integer
          description: The total visits to the game
          format: int64
        maxPlayers:
          type: integer
          description: The game max players
          format: int32
        created:
          type: string
          description: The game created time
          format: date-time
        updated:
          type: string
          description: The game updated time
          format: date-time
        studioAccessToApisAllowed:
          type: boolean
          description: The setting of IsStudioAccessToApisAllowed of the universe
        createVipServersAllowed:
          type: boolean
          description: Gets or sets the flag to indicate whether the create vip servers
            button should be allowed in game details page
        universeAvatarType:
          type: integer
          description: Avatar type. Possible values are MorphToR6, MorphToR15, and
            PlayerChoice ['MorphToR6' = 1, 'PlayerChoice' = 2, 'MorphToR15' = 3]
          format: int32
          enum:
          - 1
          - 2
          - 3
        genre:
          type: string
          description: The game genre display name
        isAllGenre:
          type: boolean
          description: Is this game all genre.
        isFavoritedByUser:
          type: boolean
          description: Is this game favorited by user.
        favoritedCount:
          type: integer
          description: Game number of favorites.
          format: int64
      description: Response model for getting the game detail
    Roblox.Games.Api.Models.Response.GameFavoriteResponse:
      type: object
      properties:
        isFavorited:
          type: boolean
          description: Is it a favorite game.
      description: Game favorite response model.
    Roblox.Games.Api.Models.Response.GameFavoritesCountResponse:
      type: object
      properties:
        favoritesCount:
          type: integer
          description: Favorites count.
          format: int64
      description: Response model for favorited game count.
    Roblox.Games.Api.Models.Response.GameFilter:
      type: object
      properties:
        token:
          type: string
          description: Token
        name:
          type: string
          description: Filter name
        tokenExpiryInSeconds:
          type: integer
          description: TokenExpiryInSeconds
          format: int32
      description: Game filter response model.
    Roblox.Games.Api.Models.Response.GameMediaItem:
      type: object
      properties:
        id:
          type: integer
          description: The media item id.
          format: int64
        assetTypeId:
          type: integer
          description: The media item type id
          format: int64
        assetType:
          type: string
          description: The media item type, Image or YouTubeVideo
        imageId:
          type: integer
          description: The media item image id
          format: int64
        videoHash:
          type: string
          description: The media item video hash
        videoTitle:
          type: string
          description: The video title for video items.
        approved:
          type: boolean
          description: The media item is approved or not
        altText:
          type: string
          description: The media item's alt text
      description: Response model for getting the game media item
    Roblox.Games.Api.Models.Response.GamePassResponse:
      type: object
      properties:
        id:
          type: integer
          description: The game pass id
          format: int64
        name:
          type: string
          description: The game pass name
        displayName:
          type: string
          description: The game pass display name
        productId:
          type: integer
          description: The game pass product id
          format: int64
        price:
          type: integer
          description: The game pass price
          format: int64
        sellerName:
          type: string
          description: The seller's display name
        sellerId:
          type: integer
          description: The seller's ID
          format: int64
        isOwned:
          type: boolean
          description: Is an owned game pass
      description: Response model for getting game passes
    Roblox.Games.Api.Models.Response.GameProductResponse:
      type: object
      properties:
        universeId:
          type: integer
          description: The game universe id
          format: int64
        isForSale:
          type: boolean
          description: The game purchasability
        productId:
          type: integer
          description: The game product id
          format: int64
        price:
          type: integer
          description: The game price
          format: int64
        sellerId:
          type: integer
          description: "The game seller id\r\nUser ID for users, Agent ID for groups"
          format: int64
      description: Response model for getting the game product information
    Roblox.Games.Api.Models.Response.GameRecommendationsResponse:
      type: object
      properties:
        games:
          type: array
          description: The recommended games.
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameResponseModel'
        nextPaginationKey:
          type: string
          description: "The pagination key for next page query.\r\nIt will be null\
            \ if there is no more data."
      description: Game recommendations response model.
    Roblox.Games.Api.Models.Response.GameResponseModel:
      type: object
      properties:
        creatorId:
          type: integer
          description: Creator Id
          format: int64
        creatorName:
          type: string
          description: Creator name
        creatorType:
          type: string
          description: Creator type
        creatorHasVerifiedBadge:
          type: boolean
          description: Creator verified badge status
        totalUpVotes:
          type: integer
          description: Total up votes
          format: int64
        totalDownVotes:
          type: integer
          description: Total down votes
          format: int64
        universeId:
          type: integer
          description: Universe id
          format: int64
        name:
          type: string
          description: Game name
        placeId:
          type: integer
          description: Place Id
          format: int64
        playerCount:
          type: integer
          description: Player count
          format: int32
        imageToken:
          type: string
          description: Place image token
        isSponsored:
          type: boolean
          description: Is sponsored
        nativeAdData:
          type: string
          description: Native ad data
        isShowSponsoredLabel:
          type: boolean
          description: Show the sponsored label
        price:
          type: integer
          description: The game paid access price
          format: int64
        analyticsIdentifier:
          type: string
          description: Provide all necessary information which helps analytics for
            improvement, for example, the algorithm, dataset version, position, etc..
        gameDescription:
          type: string
          description: Provide all necessary information which helps analytics for
            improvement, for example, the algorithm, dataset version, position, etc..
        genre:
          type: string
          description: The game genre display name
      description: Response model for games.
    Roblox.Games.Api.Models.Response.GameSort:
      type: object
      properties:
        token:
          type: string
          description: Token
        name:
          type: string
          description: Game sort internal name
        displayName:
          type: string
          description: Game sort display name
        gameSetTypeId:
          type: integer
          description: Game sort id
          format: int32
        gameSetTargetId:
          type: integer
          description: Extra id used by some Game Sets
          format: int64
        timeOptionsAvailable:
          type: boolean
          description: Time options available
        genreOptionsAvailable:
          type: boolean
          description: Genre options available
        numberOfRows:
          type: integer
          description: Number of rows to display on web only
          format: int32
        numberOfGames:
          type: integer
          description: Number of games
          format: int32
        isDefaultSort:
          type: boolean
          description: Is in the default sorts
        contextUniverseId:
          type: integer
          description: ContextUniverseId
          format: int64
        contextCountryRegionId:
          type: integer
          description: ContextCountryRegionId
          format: int32
        tokenExpiryInSeconds:
          type: number
          description: TokenExpiryInSeconds
          format: double
      description: Response model for a game sort.
    Roblox.Games.Api.Models.Response.GameSortsResponse:
      type: object
      properties:
        sorts:
          type: array
          description: GameSort response models
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameSort'
        timeFilters:
          type: array
          description: Time filters
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.TimeFilter'
        genreFilters:
          type: array
          description: Genre filters
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GenreFilter'
        gameFilters:
          type: array
          description: Game filters
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameFilter'
        pageContext:
          $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.PageContext'
        gameSortStyle:
          type: string
          description: GameSortStyle
      description: Response model for a collection of game sorts
    Roblox.Games.Api.Models.Response.GameSpotlightResponse:
      type: object
      properties:
        spotlightType:
          type: string
          description: The spotlight game type; reason the game has been spotlighted.
        spotlightActionText:
          type: string
          description: Localized text to display on the client for this spotlight
            game (call to action).
        spotlightTypeData:
          $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.SpotlightTypeData'
        gameInfo:
          $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameResponseModel'
      description: Response model for a spotlight game.
    Roblox.Games.Api.Models.Response.GameVoteResponse:
      type: object
      properties:
        id:
          type: integer
          description: The game universe id
          format: int64
        upVotes:
          type: integer
          description: The game up votes
          format: int64
        downVotes:
          type: integer
          description: The game down votes
          format: int64
      description: Response model for getting the game vote
    Roblox.Games.Api.Models.Response.GamesSearchResponse:
      type: object
      properties:
        games:
          type: array
          description: Games
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameResponseModel'
        suggestedKeyword:
          type: string
          description: SuggestedKeyword
        correctedKeyword:
          type: string
          description: CorrectedKeyword
        filteredKeyword:
          type: string
          description: FilteredKeyword
        hasMoreRows:
          type: boolean
          description: HasMoreRows
        nextPageExclusiveStartId:
          type: integer
          description: NextPageExclusiveStartId
          format: int64
        featuredSearchUniverseId:
          type: integer
          description: FeaturedSearch UniverseId if featured search is triggered,
            otherwise null
          format: int64
        emphasis:
          type: boolean
          description: "True if we'll do the emphasis treatment for the first returned\
            \ universe, false if this is a broad query\r\nNull if this is not an initial\
            \ search request"
        cutOffIndex:
          type: integer
          description: Cutoff index if q2d stats is applied, otherwise null
          format: int64
        algorithm:
          type: string
          description: Algorithm used for game search (Elastic Search field, used
            for sending events in clients)
        algorithmQueryType:
          type: string
          description: Query type for game search (Elastic search field,  used for
            sending events in clients)
        suggestionAlgorithm:
          type: string
          description: Algorithm used for game search suggestion (used for sending
            events in clients)
        relatedGames:
          type: array
          description: Related Games
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameResponseModel'
        esDebugInfo:
          $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.ElasticSearchDebugInfoModel'
      description: Response model for games search
    Roblox.Games.Api.Models.Response.GenreFilter:
      type: object
      properties:
        token:
          type: string
          description: Token
        name:
          type: string
          description: Genre display name
        tokenExpiryInSeconds:
          type: number
          description: TokenExpiryInSeconds
          format: double
      description: Genre filter response model.
    Roblox.Games.Api.Models.Response.PageContext:
      type: object
      properties:
        pageId:
          type: string
          description: Id to identify the page as shown to the user.
          format: uuid
        isSeeAllPage:
          type: boolean
          description: SortPosition
      description: This class contains context information about a page load for the
        user.
    Roblox.Games.Api.Models.Response.PlaceDetails:
      type: object
      properties:
        placeId:
          type: integer
          description: Place Id
          format: int64
        name:
          type: string
          description: Place name
        description:
          type: string
          description: Place description
        sourceName:
          type: string
          description: Place name in source language
        sourceDescription:
          type: string
          description: Place description in source language
        url:
          type: string
          description: Url
        builder:
          type: string
          description: Creator name
        builderId:
          type: integer
          description: Creator Id
          format: int64
        hasVerifiedBadge:
          type: boolean
          description: Builder verified badge status.
        isPlayable:
          type: boolean
          description: Is playable
        reasonProhibited:
          type: string
          description: Reason prohibited
        universeId:
          type: integer
          description: Universe id
          format: int64
        universeRootPlaceId:
          type: integer
          description: UniverseRootPlaceId
          format: int64
        price:
          type: integer
          description: Price
          format: int64
        imageToken:
          type: string
          description: Place image token
      description: Response model for a place.
    Roblox.Games.Api.Models.Response.PlayabilityStatusResponse:
      type: object
      properties:
        playabilityStatus:
          type: integer
          description: The actual playability status of the universe including the
            reason if unplayable ['UnplayableOtherReason' = 0, 'Playable' = 1, 'GuestProhibited'
            = 2, 'GameUnapproved' = 3, 'IncorrectConfiguration' = 4, 'UniverseRootPlaceIsPrivate'
            = 5, 'InsufficientPermissionFriendsOnly' = 6, 'InsufficientPermissionGroupOnly'
            = 7, 'DeviceRestricted' = 8, 'UnderReview' = 9, 'PurchaseRequired' = 10,
            'AccountRestricted' = 11, 'TemporarilyUnavailable' = 12, 'PlaceHasNoPublishedVersion'
            = 13, 'ComplianceBlocked' = 14, 'ContextualPlayabilityRegionalAvailability'
            = 15, 'ContextualPlayabilityRegionalCompliance' = 16, 'ContextualPlayabilityAgeRecommendationParentalControls'
            = 17, 'ContextualPlayabilityAgeGated' = 18, 'ContextualPlayabilityUnverifiedSeventeenPlusUser'
            = 19]
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
        isPlayable:
          type: boolean
          description: Whether or not the universe is playable for the user
        universeId:
          type: integer
          description: The universeId of the requested universe to help with batching
            requests
          format: int64
      description: Response model for getting a universe's playability status for
        a user
    Roblox.Games.Api.Models.Response.PrivateServersEnabledInUniverseResponse:
      type: object
      properties:
        privateServersEnabled:
          type: boolean
          description: Whether private servers are enabled in the universe.
      description: Response model for getting whether a universe has private servers
        enabled.
    Roblox.Games.Api.Models.Response.SpotlightTypeData:
      type: object
      description: Parent class to derive custom data for each spotlight type.
    Roblox.Games.Api.Models.Response.Thumbnail:
      type: object
      properties:
        final:
          type: boolean
          description: Final
        url:
          type: string
          description: Url
        cdnUrl:
          type: string
          description: CdnUrl
        retryToken:
          type: string
          description: RetryToken
        universeId:
          type: integer
          description: UniverseId
          format: int64
        placeId:
          type: integer
          description: PlaceId
          format: int64
      description: Thumbnail response model.
    Roblox.Games.Api.Models.Response.TimeFilter:
      type: object
      properties:
        token:
          type: string
          description: Token
        name:
          type: string
          description: Filter name
        tokenExpiryInSeconds:
          type: number
          description: TokenExpiryInSeconds
          format: double
      description: Response model for time filter.
    Roblox.Games.Api.Models.Response.UserGameVoteResponse:
      type: object
      properties:
        canVote:
          type: boolean
          description: Whether the user can vote the game
        userVote:
          type: boolean
          description: The user's vote status for the game
        reasonForNotVoteable:
          type: string
          description: The reason why the user can't vote
      description: Response model for getting the user vote status for a game
    Roblox.Games.Api.Models.Response.VerifiedBadgeUserResponse:
      type: object
      properties:
        hasVerifiedBadge:
          type: boolean
          description: The user's verified badge status.
        id:
          type: integer
          format: int64
        name:
          type: string
        displayName:
          type: string
      description: A response model specific to multi-get user.
    Roblox.Games.Api.PlaceResponse:
      type: object
      properties:
        id:
          type: integer
          description: Place id
          format: int64
        name:
          type: string
          description: Place name
      description: Response model for a VIP server place
    Roblox.Games.Api.PrivateServersResponse:
      type: object
      properties:
        privateServerResponses:
          type: array
          description: A collection of game server responses
          items:
            $ref: '#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse'
      description: User Presences Response model
    Roblox.Games.Api.VipServerCanInviteResponse:
      type: object
      properties:
        canInvite:
          type: boolean
          description: Sufficient permissions to invite user
      description: Response model for VIP server can-invite user.
    Roblox.Games.Api.VipServerPermissionsResponse:
      type: object
      properties:
        clanAllowed:
          type: boolean
          description: Clan access
        enemyClanId:
          type: integer
          description: EnemyClanId
          format: int64
        friendsAllowed:
          type: boolean
          description: Friend access
        users:
          type: array
          description: Users
          items:
            $ref: '#/components/schemas/Roblox.Web.Responses.Users.SkinnyUserResponse'
      description: Response model for VIP server permissions.
    Roblox.Games.Api.VipServerResponse:
      type: object
      properties:
        id:
          type: integer
          description: Server Id
          format: int64
        name:
          type: string
          description: Server name
        game:
          $ref: '#/components/schemas/Roblox.Games.Api.GameResponse'
        joinCode:
          type: string
          description: Server join code
        active:
          type: boolean
          description: Server status
        subscription:
          $ref: '#/components/schemas/Roblox.Games.Api.VipServerSubscriptionResponse'
        permissions:
          $ref: '#/components/schemas/Roblox.Games.Api.VipServerPermissionsResponse'
        voiceSettings:
          $ref: '#/components/schemas/Roblox.Games.Api.VipServerVoiceSettingsResponse'
      description: Response model for a VIP server.
    Roblox.Games.Api.VipServerSubscriptionResponse:
      type: object
      properties:
        active:
          type: boolean
          description: Active
        expired:
          type: boolean
          description: Expired
        expirationDate:
          type: string
          description: Expiration date
          format: date-time
        price:
          type: integer
          description: Price
          format: int64
        canRenew:
          type: boolean
          description: Can renew a subscription
        hasInsufficientFunds:
          type: boolean
          description: Subscription cancelled due to insufficient funds
        hasRecurringProfile:
          type: boolean
          description: Subscription has a recurring profile
        hasPriceChanged:
          type: boolean
          description: Subscriptions price has changed
      description: Response model for VIP server subscription.
    Roblox.Games.Api.VipServerUpdatePermissionsRequest:
      type: object
      properties:
        clanAllowed:
          type: boolean
          description: Clan access
        enemyClanId:
          type: integer
          description: EnemyClanId
          format: int32
        friendsAllowed:
          type: boolean
          description: Friend access
        usersToAdd:
          type: array
          description: Users to add
          items:
            type: integer
            format: int64
        usersToRemove:
          type: array
          description: Users to remove
          items:
            type: integer
            format: int64
      description: Request model for updating permissions for a VIP server.
    Roblox.Games.Api.VipServerUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Server name
        newJoinCode:
          type: boolean
          description: Server join code
        active:
          type: boolean
          description: Server status
      description: Request model to update a VIP server.
    Roblox.Games.Api.VipServerUpdateSubscriptionRequest:
      type: object
      properties:
        active:
          type: boolean
          description: Active
        price:
          type: integer
          description: Price
          format: int64
      description: Request model to update subscriptions for a VIP server.
    Roblox.Games.Api.VipServerUpdateVoiceSettingsRequest:
      type: object
      properties:
        enabled:
          type: boolean
    Roblox.Games.Api.VipServerVoiceSettingsResponse:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether the voice chat is enabled
      description: Contains voice settings of a vip server
    Roblox.Paging.ExclusiveStartKeyCursor[System.String]:
      type: object
      properties:
        key:
          type: string
        sortOrder:
          type: integer
          description: ' [''Asc'' = 1, ''Desc'' = 2]'
          format: int32
          enum:
          - 1
          - 2
        pagingDirection:
          type: integer
          description: ' [''Forward'' = 1, ''Backward'' = 2]'
          format: int32
          enum:
          - 1
          - 2
        pageNumber:
          type: integer
          format: int32
        discriminator:
          type: string
        count:
          type: integer
          format: int32
    Roblox.Paging.StartIndexCursor:
      type: object
      properties:
        startIndex:
          type: integer
          format: int64
        discriminator:
          type: string
        count:
          type: integer
          format: int32
    Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]:
      type: object
      properties:
        SortOrder:
          type: integer
          description: ' [''Asc'' = 1, ''Desc'' = 2]'
          format: int32
          readOnly: true
          enum:
          - 1
          - 2
        PagingDirection:
          type: integer
          description: ' [''Forward'' = 1, ''Backward'' = 2]'
          format: int32
          readOnly: true
          enum:
          - 1
          - 2
        Count:
          type: integer
          format: int32
          readOnly: true
    Roblox.Web.Responses.Games.GameServerResponse:
      type: object
      properties:
        id:
          type: string
          description: The game server ID.
          format: uuid
        maxPlayers:
          type: integer
          description: The max number of players allowed to enter the server at the
            same time.
          format: int32
        playing:
          type: integer
          description: The number of players actively in the server.
          format: int32
        playerTokens:
          type: array
          description: The thumbnail tokens for all the players in the server.
          items:
            type: string
        players:
          type: array
          description: The players in the server.
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.GameServerPlayerResponse'
        fps:
          type: number
          description: The current frames per second the server is running at.
          format: double
        ping:
          type: integer
          description: The game server ping time (measured in milliseconds).
          format: int32
        name:
          type: string
          description: The name of the private server.
        vipServerId:
          type: integer
          description: The private server ID.
          format: int64
        accessCode:
          type: string
          description: The private server access code.
          format: uuid
        owner:
          $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.VerifiedBadgeUserResponse'
      description: Game server list response model.
    Roblox.Web.Responses.Users.SkinnyUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        displayName:
          type: string
    Roblox.Web.WebAPI.ApiEmptyResponseModel:
      type: object
    Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int64]:
      type: object
      properties:
        ExclusiveStartKeyInfo:
          $ref: '#/components/schemas/Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]'
        CursorRecipe:
          type: string
    Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameDetailResponse]:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameDetailResponse'
    Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameMediaItem]:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameMediaItem'
    Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameProductResponse]:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameProductResponse'
    Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameSpotlightResponse]:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameSpotlightResponse'
    Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Games.Api.Models.Response.GameVoteResponse]:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GameVoteResponse'
    Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Games.Api.Models.Response.GamePassResponse]:
      type: object
      properties:
        previousPageCursor:
          type: string
        nextPageCursor:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Roblox.Games.Api.Models.Response.GamePassResponse'
    Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Web.Responses.Games.GameServerResponse]:
      type: object
      properties:
        previousPageCursor:
          type: string
        nextPageCursor:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse'
